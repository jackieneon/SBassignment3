//where the leap json info will be sent to control the ball and x & y 

import ddf.minim.spi.*;
import ddf.minim.signals.*;
import ddf.minim.*;
import ddf.minim.analysis.*;
import ddf.minim.ugens.*;
import ddf.minim.effects.*;

import de.voidplus.leapmotion.*;

LeapMotion leap;

Minim minim;
AudioOutput out;
Oscillator  osc;

Balance balance;

//PVector remotePoint = new PVector(0,0);


//PVector hand_position  = new PVector(0,0);

public void setup() {
  size(640, 360, P3D);
  noStroke();

  leap = new LeapMotion(this);  

  minim = new Minim(this);
  // out = minim.getLineOut();
  out = minim.getLineOut(Minim.STEREO, 1024);

  // see the example AudioOutput >> SawWaveSignal for more about this class
  osc = new SawWave(100, 0.2, out.sampleRate());
  // see the example Polyphonic >> addSignal for more about this
  out.addSignal(osc);
}

public void draw() {
  defineLights();
  background(0);

  // int fps = leap.getFrameRate();

  // HANDS
  for (Hand hand : leap.getHands()) {

    hand.draw();
    int     hand_id          = hand.getId();
    PVector hand_position    = hand.getPosition();

    //    // TOOLS
    //    for (Tool tool : hand.getTools()) {
    //      // Basics
    //      tool.draw();
    //      int     tool_id           = tool.getId();
    //      PVector tool_position     = tool.getPosition();
    //
    //      int     touch_zone        = tool.getTouchZone();
    //      float   touch_distance    = tool.getTouchDistance();
    //    }
    //}


    if ( out.hasControl(Controller.PAN) )
    {
      // map the mouse position to the audible range of the gain
      float val = map(hand_position.x, 1, width, -1, 1);
      // if a pan control is not available, this will do nothing
      out.shiftPan(val, -val, (int(hand_position.x)));
    }


    if ( out.hasControl(Controller.GAIN) )
    {
      // map the mouse position to the audible range of the gain
      float val = map(hand_position.y, 0, height, 0, -30);
      // if a gain control is not available, this will do nothing
      out.setGain(val);
    }

    for (int x = 0; x <= width; x += 60) {
      for (int y = 0; y <= height-20; y += 10) {
        pushMatrix();
        translate(x, y);
        rotateY(map(hand_position.x, 0, width, 0, PI));
        rotateX(map(hand_position.y, 0, height, 0, PI));
        box(20);
        popMatrix();
      }
    }
  }
}

public void defineLights() {
  // Orange point light on the right
  pointLight(150, 100, 0, // Color
  200, -150, 0); // Position

  // Blue directional light from the left
  directionalLight(0, 102, 255, // Color
  1, 0, 0);    // The x-, y-, z-axis direction

//added to see if the leap will move like the mouse? 
  for (Hand hand : leap.getHands()) {

    hand.draw();
    int     hand_id          = hand.getId();
    PVector hand_position    = hand.getPosition();

    // Yellow spotlight from the front
    spotLight(255, 255, 109, // Color
    hand_position.x, hand_position.y, 100, // Position
    0, -0.05, -0.05, // Direction
    PI / 1, 1);     // Angle, concentration
  }
}
void stop()
{
  // always close Minim audio classes when you are finished with them
  out.close();
  minim.stop();

  super.stop();
}

void leapOnInit() {
  // println("Leap Motion Init");
}
void leapOnConnect() {
  // println("Leap Motion Connect");
}
void leapOnFrame() {
  // println("Leap Motion Frame");
}
void leapOnDisconnect() {
  // println("Leap Motion Disconnect");
}
void leapOnExit() {
  // println("Leap Motion Exit");
}
